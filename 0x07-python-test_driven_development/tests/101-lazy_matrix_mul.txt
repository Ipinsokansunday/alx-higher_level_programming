#!/usr/bin/python3
"""Unittests for lazy_matrix_mul([[..], [..]])."""

import unittest
from typing import List
from 101-lazy_matrix_mul import lazy_matrix_mul


class TestLazyMatrixMultiplication(unittest.TestCase):
    """Define unittests for lazy_matrix_mul([[..], [..]])."""

    def test_ordered_matrices(self):
        """Test multiplication of two ordered matrices."""
        m_a: List[List[int]] = [
            [1, 2],
            [3, 4],
        ]
        m_b: List[List[int]] = m_a
        self.assertEqual(lazy_matrix_mul(m_a, m_b), [[7, 10], [15, 22]])

    def test_single_element_matrices(self):
        """Test multiplication of matrices with a single element."""
        m_a: List[List[int]] = [[1, 2]]
        m_b: List[List[int]] = [[3, 4], [5, 6]]
        self.assertEqual(lazy_matrix_mul(m_a, m_b), [[13, 16]])

    def test_matrices_with_floats(self):
        """Test multiplication of matrices with floats."""
        m_a: List[List[float]] = [
            [1.2, 5.5, 6.2],
            [4.66, 12.3, -9.2],
        ]
        m_b: List[List[float]] = [
            [5.0, 3.3],
            [-2.9, 4.4],
            [7.2, 4.4],
        ]
        self.assertEqual(lazy_matrix_mul(m_a, m_b), [[34.69, 55.44], [-78.61, 29.018]])

    def test_missing_arguments(self):
        """Test if the function raises TypeError for missing arguments."""
        with self.assertRaises(TypeError):
            lazy_matrix_mul(m_a)

        with self.assertRaises(TypeError):
            lazy_matrix_mul()

    def test_invalid_matrices(self):
        """Test if the function raises ValueError for invalid matrices."""
        m_a: List[List[int]] = [
            [1, 2],
            [3, 4],
        ]
        m_b: List[List[int]] = [
            [1, 2],
            [2, 3],
            [4, 5],
        ]
        with self.assertRaises(ValueError):
            lazy_matrix_mul(m_a, m_b)

        with self.assertRaises(ValueError):
            lazy_matrix_mul([[]], [[5, 6], [7, 8]])

        with self.assertRaises(ValueError):
            lazy_matrix_mul([[5, 6], [7, 8]], [[]])

    def test_invalid_matrix_types(self):
        """Test if the function raises ValueError for invalid matrix types."""
        with self.assertRaises(ValueError):
            lazy_matrix_mul("not a list", [[1, 2]])

        with self.assertRaises(ValueError):
            lazy_matrix_mul([[1, 2]], "also not a list")

        with self.assertRaises(ValueError):
            lazy_matrix_mul("not a list", "also not a list")

        with self.assertRaises(ValueError):
            lazy_matrix_mul(None, None)

    def test_invalid_matrix_sizes(self):
        """Test if the function raises ValueError for invalid matrix sizes."""
        m_a: List[List[int]] = [
            [1, 2],
            [3, 4, 5],
        ]
        m_b: List[List[int]] = [
            [1, 2],
            [3, 4],
        ]
        with self.assertRaises(ValueError):
            lazy_matrix_mul(m_a, m_b)

        m_a: List[List[int]] = [
            [1, 2],
            [3, 4],
        ]
        m_b: List[List[int]] = [
            [1, 2],
            [3, 4, 5],
        ]
        with self.assertRaises(ValueError):
            lazy_matrix_mul(m_a, m_b)

        m_a: List[List[int]] = [
            [1, 2],
            [3, 4, 5],
        ]
        m_b: List[List[int]] = m_a
        with self.assertRaises(ValueError):
            lazy_matrix_mul(m_a, m_b)


if __name__ == '__main__':
    unittest.main()

